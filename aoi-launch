#!/bin/bash -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
IMAGES_DIR="$(aoi config get images_dir $HOME/.cloud-images)"

function error {
    echo "$@"
    exit 1
}


if [ "$1" == "" ]; then
    echo "Must supply a VM name to create."
    exit 1
else
    NAME=$1
fi

if [ "$2" == "" ]; then
    DISTRO=focal
else
    DISTRO=$2
fi


# Environment variables in sync with juju kvm-maas scripts.
set -a

: ${VIRT_CPUS:=1}
: ${VIRT_RAM:=1024}
: ${VIRT_DISK_SIZE:=16}

set +a

HOSTNAME=$NAME
INSTANCE=$NAME

TARGET_IMAGE=$HOSTNAME.img
TARGET_IMAGE_PATH=$IMAGES_DIR/$HOSTNAME.img
CDROM=${IMAGES_DIR}/${HOSTNAME}-config.iso

virsh pool-define-as \
    --name cloud-images --type dir --target $IMAGES_DIR 2> /dev/null \
    || echo "Image pool already exists: $IMAGES_DIR"

pushd $IMAGES_DIR > /dev/null 2>&1
BACKING_IMAGE=$(readlink $DISTRO.baseimg) || echo "Base image not found."
if [ "$BACKING_IMAGE" == "" ]; then
    echo "Must specify a distribution that matches an existing image."
    echo "Available images:"
    find . -type l -name '*.baseimg' | sed 's/\.\//    /' | sed 's/.baseimg$//'
    exit 1
fi
BACKING_IMAGE_PATH=$IMAGES_DIR/$BACKING_IMAGE
qemu-img create -f qcow2 -F qcow2 -b "$BACKING_IMAGE" $TARGET_IMAGE
qemu-img resize $TARGET_IMAGE +${VIRT_DISK_SIZE}G
qemu-img info $TARGET_IMAGE
popd > /dev/null 2>&1

# Create a CD-ROM with cloud-init meta-data and user-data files.
CIDATA=$(mktemp -d)
$SCRIPT_DIR/aoi-get-cloud-metadata $HOSTNAME > "$CIDATA"/meta-data
$SCRIPT_DIR/aoi-get-cloud-userdata > "$CIDATA"/user-data
pushd "$CIDATA"
echo "cloud-init meta data:"
cat meta-data
echo ""
echo "cloud-init user data:"
cat user-data
echo ""
echo "Writing cloud-init data to: $CDROM"
genisoimage -o $CDROM -V cidata -r -input-charset utf-8 -J meta-data user-data
popd
rm -rf "$CIDATA"

virt-install \
    --name $HOSTNAME \
    --virt-type kvm --hvm --noautoconsole \
    --vcpus $VIRT_CPUS \
    --import --disk=$TARGET_IMAGE_PATH,backing_store=$BACKING_IMAGE_PATH --disk=$CDROM,device=cdrom \
    --memory $VIRT_RAM \
    --network network=default,mac=$($SCRIPT_DIR/aoi-get-mac $HOSTNAME) \
    --network network=testnet,mac=$($SCRIPT_DIR/aoi-get-mac testnet-$HOSTNAME) \
    --check path_in_use=off
virsh autostart $HOSTNAME

function wait_for {
    while [ "$($SCRIPT_DIR/aoi-ssh $1 echo OK 2> /dev/null)" != "OK" ]; do
        sleep 0.1
    done
}

echo -n "Waiting for $HOSTNAME to become available..."
wait_for $HOSTNAME
printf "\n"

if [ "$DISTRO" == "xenial" ]; then
    # xenial cloud-init has a race condition whereby the hostname provided
    # by DHCP will not be correct. Need to force a DHCP renewal.
    # See https://launchpad.net/bugs/1574963
    echo "Rebooting to reset lease table..."
    $SCRIPT_DIR/aoi-ssh $HOSTNAME sudo service networking reload
    wait_for $HOSTNAME
fi

UBUNTU_ARCHIVE_HOST="$(aoi config get ubuntu_archive_host '')"
if [ "$UBUNTU_ARCHIVE_HOST" != "" ]; then
    $SCRIPT_DIR/aoi-ssh $HOSTNAME sudo sed --in-place "s/archive.ubuntu.com/$UBUNTU_ARCHIVE_HOST/" /etc/apt/sources.list
fi
UBUNTU_SECURITY_HOST="$(aoi config get ubuntu_security_host '')"
if [ "$UBUNTU_SECURITY_HOST" != "" ]; then
    $SCRIPT_DIR/aoi-ssh $HOSTNAME sudo sed --in-place "s/security.ubuntu.com/$UBUNTU_SECURITY_HOST/" /etc/apt/sources.list
fi

echo "$HOSTNAME is now available. To access, use:"
echo "    $SCRIPT_DIR/aoi-ssh $HOSTNAME [command]"
